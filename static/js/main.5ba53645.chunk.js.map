{"version":3,"sources":["components/ErrorComponent.js","ProjectEnums.js","components/MemeCardComponent.js","store/actions/globalActions.js","components/MemePageComponent.js","components/MemeRouterComponent.js","components/NavigationComponent.js","components/AlertMessageComponent.js","components/UploadMemeComponent.js","App.js","reportWebVitals.js","store/reducers/globalReducer.js","memeDb.js","store/store.js","index.js"],"names":["Error","MEME_TYPE","VOTE_DIRECTION","MemeCard","meme","dispatch","useDispatch","handleVote","voteDirection","memeId","type","id","setVoteAction","Card","className","border","Body","Title","title","Img","variant","src","img","Text","upvotes","downvotes","Button","onClick","MemePage","memes","route","length","CardColumns","map","m","MemeRouter","hotMemes","useSelector","state","filter","Number","regularMemes","Navigation","Navbar","bg","expand","sticky","Toggle","aria-controls","Collapse","Nav","to","Brand","AlertMessage","showMessage","messageContent","Alert","UploadMeme","initialFormData","url","useState","formData","setFormData","showSuccess","setShowSucces","handleFormData","e","target","name","value","trim","Form","onSubmit","preventDefault","uuidv4","payload","addMemeAction","setTimeout","Group","controlId","Label","Control","placeholder","required","onChange","accept","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","updateUpVote","updateDownVote","vote","updateVotesCallback","store","createStore","action","newArrayUpvote","newArrayDowvote","ReactDOM","render","document","getElementById"],"mappings":"sOAAe,SAASA,IACtB,OACE,gCACE,2CACA,kD,oCCJOC,EACN,MADMA,EAEF,UAGEC,EACP,KADOA,EAEL,OCDO,SAASC,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAC3BC,EAAWC,cAEXC,EAAa,SAACC,GAClBH,ECNyB,SAACG,EAAeC,GAC3C,OAAID,IAAkBN,EACb,CACLQ,KAAM,SACNC,GAAIF,GAGD,CACLC,KAAM,WACNC,GAAIF,GDHKG,CAAcJ,EAAeJ,EAAKO,MAG7C,OACE,cAACE,EAAA,EAAD,CAAMC,UAAU,iCAAiCC,OAAO,OAAxD,SACE,eAACF,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,UAAab,EAAKc,QAClB,cAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAKjB,EAAKkB,MAClC,eAACT,EAAA,EAAKU,KAAN,sBAEGnB,EAAKoB,QACL,IAHH,aAKGpB,EAAKqB,aAER,cAACC,EAAA,EAAD,CAAQN,QAAQ,YAAYO,QAAS,kBAAMpB,EAAWL,IAAtD,iBACA,cAACwB,EAAA,EAAD,CAAQN,QAAQ,YAAYO,QAAS,kBAAMpB,EAAWL,IAAtD,sBEvBO,SAAS0B,EAAT,GAAqC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACxC,OAAID,EAAME,OAEN,gCACE,6BAAKD,IACL,cAACE,EAAA,EAAD,UAEIH,EAAMI,KAAI,SAACC,GAAD,OAAQ,cAAC/B,EAAD,CAAUC,KAAM8B,GAAQA,EAAEvB,YAOpD,gCACE,6BAAKmB,IACL,6CAEGA,EACA,IAHH,6BCfS,SAASK,EAAT,GAAgC,IAAVL,EAAS,EAATA,MAC7BM,EAAWC,aACf,SAACC,GAAD,OAAWA,EAAMT,MACdU,QAAO,SAACL,GAAD,OAAOM,OAAON,EAAEV,QAAUU,EAAET,YAAc,QAEhDgB,EAAeJ,aACnB,SAACC,GAAD,OAAWA,EAAMT,MACdU,QAAO,SAACL,GAAD,OAAOM,OAAON,EAAEV,QAAUU,EAAET,WAAa,QAGrD,OAAIK,IAAU7B,EACL,cAAC2B,EAAD,CAAUC,MAAOO,EAAUN,MAAOA,IAEpC,cAACF,EAAD,CAAUC,MAAOY,EAAcX,MAAOA,I,oBCbhC,SAASY,IACtB,OACE,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,OAAO,MAAtC,UACE,cAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,eAACL,EAAA,EAAOM,SAAR,CAAiBtC,GAAG,mBAApB,UAEE,eAACuC,EAAA,EAAD,CAAKpC,UAAU,UAAf,UACE,cAAC,IAAD,CAASA,UAAU,uBAAuBqC,GAAG,WAA7C,qBACA,cAAC,IAAD,CAASrC,UAAU,uBAAuBqC,GAAG,OAA7C,oBAGF,cAACR,EAAA,EAAOS,MAAR,CAActC,UAAU,QAAxB,SAAgC,gDAEhC,cAACoC,EAAA,EAAD,CAAKpC,UAAU,0BAAf,SACE,cAAC,IAAD,CAASA,UAAU,uBAAuBqC,GAAG,eAA7C,iC,2CChBK,SAASE,EAAT,GAAwD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAClD,OAAID,EAEA,cAACE,EAAA,EAAD,CAAOpC,QAAQ,OAAf,SACGmC,IAIA,6BCFM,SAASE,IACtB,IAAMpD,EAAWC,cAEXoD,EAAkB,CAAExC,MAAO,GAAIyC,IAAK,IAC1C,EAAgCC,mBAASF,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAqCF,oBAAS,GAA9C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAiB,SAACC,GACtBJ,EAAY,2BACPD,GADM,kBAERK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,MAAMC,WAgBpC,OACE,gCACE,uDACA,eAACC,EAAA,EAAD,CAAMC,SATY,SAACN,GACrBA,EAAEO,iBACFpE,ELbyB,SAAC,GAAD,IAAGa,EAAH,EAAGA,MAAOyC,EAAV,EAAUA,IAAV,MAAqB,CAChDjD,KAAM,WACNC,GAAI+D,cACJC,QAAS,CACPhE,GAAI+D,cACJxD,QACAM,QAAS,EACTC,UAAW,EACXH,IAAKqC,IKKIiB,CAAcf,IAPvBC,EAAY,eAAKJ,IACjBM,GAAc,GACda,YAAW,kBAAMb,GAAc,KAAQ,MAYrC,UACE,eAACO,EAAA,EAAKO,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACR,EAAA,EAAKS,MAAN,qBACA,cAACT,EAAA,EAAKU,QAAN,CACEvE,KAAK,OACL0D,KAAK,QACLc,YAAY,eACZC,UAAQ,EACRd,MAAOR,EAAS3C,MAChBkE,SAAUnB,OAGd,eAACM,EAAA,EAAKO,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACR,EAAA,EAAKS,MAAN,yBACA,cAACT,EAAA,EAAKU,QAAN,CACEvE,KAAK,MACL0D,KAAK,MACLc,YAAY,cACZC,UAAQ,EACRE,OAAO,UACPhB,MAAOR,EAASF,IAChByB,SAAUnB,OAGd,cAACvC,EAAA,EAAD,CAAQhB,KAAK,SAASU,QAAQ,QAA9B,oBACA,cAACiC,EAAD,CAAcC,YAAaS,EAAaR,eAAe,uCCtBhD+B,MA7Bf,WACE,OACE,qBAAKxE,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC4B,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAM,CAAC,IAAK,YAAzB,SACE,cAACrD,EAAD,CAAYL,MAAO7B,MAGrB,cAAC,IAAD,CAAOsF,OAAK,EAACC,KAAK,OAAlB,SACE,cAACrD,EAAD,CAAYL,MAAO7B,MAGrB,cAAC,IAAD,CAAOsF,OAAK,EAACC,KAAK,eAAlB,SACE,cAAC/B,EAAD,MAGF,cAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAlB,SACE,cAACxF,EAAD,eChBGyF,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCPRQ,EAAe,CACnBrE,MCDoB,CACpB,CACElB,GAAI+D,cACJxD,MAAO,SACPM,QAAS,EACTC,UAAW,EACXH,IAAK,aAEP,CACEX,GAAI+D,cACJxD,MAAO,SACPM,QAAS,EACTC,UAAW,EACXH,IAAK,cAEP,CACEX,GAAI+D,cACJxD,MAAO,SACPM,QAAS,EACTC,UAAW,EACXH,IAAK,aAEP,CACEX,GAAI+D,cACJxD,MAAO,SACPM,QAAS,GACTC,UAAW,EACXH,IAAK,aAEP,CACEX,GAAI+D,cACJxD,MAAO,YACPM,QAAS,EACTC,UAAW,EACXH,IAAK,oCAEP,CACEX,GAAI+D,cACJxD,MAAO,YACPM,QAAS,EACTC,UAAW,EACXH,IAAK,uDDrCH6E,EAAe,SAAC/F,GAAD,mBAAC,eAAeA,GAAhB,IAAsBoB,QAASpB,EAAKoB,QAAU,KAE7D4E,EAAiB,SAAChG,GAAD,mBAAC,eAAeA,GAAhB,IAAsBqB,UAAWrB,EAAKqB,UAAY,KAEnE4E,EAAO,SAAC5F,EAAQoB,EAAOyE,GAAhB,OAAwCzE,EAAMI,KAAI,SAAC7B,GAC9D,OAAIA,EAAKO,KAAOF,EACPL,EAEFkG,EAAoBlG,OETdmG,EAFDC,aFce,WAAmC,IAAlClE,EAAiC,uDAAzB4D,EAAcO,EAAW,uCAC7D,OAAQA,EAAO/F,MACb,IAAK,SACH,IAAMgG,EAAiBL,EAAKI,EAAO9F,GAAI2B,EAAMT,MAAOsE,GACpD,OAAO,2BACF7D,GADL,IAEET,MAAO6E,IAGX,IAAK,WACH,IAAMC,EAAkBN,EAAKI,EAAO9F,GAAI2B,EAAMT,MAAOuE,GACrD,OAAO,2BACF9D,GADL,IAEET,MAAO8E,IAGX,IAAK,WACH,OAAO,2BACFrE,GADL,IAEET,MAAM,GAAD,mBAAMS,EAAMT,OAAZ,CAAmB4E,EAAO9B,YAGnC,QAAS,OAAO,eAAKrC,O,MG9BzBsE,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.5ba53645.chunk.js","sourcesContent":["export default function Error() {\n  return (\n    <div>\n      <h1>404 ERROR</h1>\n      <p>Page not found</p>\n    </div>\n  );\n}\n","export const MEME_TYPE = {\n  HOT: 'hot',\n  REGULAR: 'regular',\n};\n\nexport const VOTE_DIRECTION = {\n  UP: 'up',\n  DOWN: 'down',\n};\n","import { useDispatch } from 'react-redux';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { setVoteAction } from '../store/actions/globalActions';\nimport { VOTE_DIRECTION } from '../ProjectEnums';\n\nexport default function MemeCard({ meme }) {\n  const dispatch = useDispatch();\n\n  const handleVote = (voteDirection) => {\n    dispatch(setVoteAction(voteDirection, meme.id));\n  };\n\n  return (\n    <Card className=\"text-center meme-card bg-light\" border=\"dark\">\n      <Card.Body>\n        <Card.Title>{meme.title}</Card.Title>\n        <Card.Img variant=\"top\" src={meme.img} />\n        <Card.Text>\n          Upvotes:\n          {meme.upvotes}\n          {' '}\n          Downvotes:\n          {meme.downvotes}\n        </Card.Text>\n        <Button variant=\"secondary\" onClick={() => handleVote(VOTE_DIRECTION.UP)}> + </Button>\n        <Button variant=\"secondary\" onClick={() => handleVote(VOTE_DIRECTION.DOWN)}> - </Button>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { VOTE_DIRECTION } from '../../ProjectEnums';\n\nexport const setVoteAction = (voteDirection, memeId) => {\n  if (voteDirection === VOTE_DIRECTION.UP) {\n    return {\n      type: 'UPVOTE',\n      id: memeId,\n    };\n  }\n  return {\n    type: 'DOWNVOTE',\n    id: memeId,\n  };\n};\n\nexport const addMemeAction = ({ title, url }) => ({\n  type: 'ADD_MEME',\n  id: uuidv4(),\n  payload: {\n    id: uuidv4(),\n    title,\n    upvotes: 0,\n    downvotes: 0,\n    img: url,\n  },\n});\n","import CardColumns from 'react-bootstrap/CardColumns';\nimport MemeCard from './MemeCardComponent';\n\nexport default function MemePage({ memes, route }) {\n  if (memes.length) {\n    return (\n      <div>\n        <h1>{route}</h1>\n        <CardColumns>\n          {\n            memes.map((m) => (<MemeCard meme={m} key={m.id} />))\n          }\n        </CardColumns>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h1>{route}</h1>\n      <h4>\n        There is no\n        {route}\n        {' '}\n        memes at this moment\n      </h4>\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport MemePage from './MemePageComponent';\nimport { MEME_TYPE } from '../ProjectEnums';\n\nexport default function MemeRouter({ route }) {\n  const hotMemes = useSelector(\n    (state) => state.memes\n      .filter((m) => Number(m.upvotes - m.downvotes) >= 5),\n  );\n  const regularMemes = useSelector(\n    (state) => state.memes\n      .filter((m) => Number(m.upvotes - m.downvotes) < 5),\n  );\n\n  if (route === MEME_TYPE.HOT) {\n    return <MemePage memes={hotMemes} route={route} />;\n  }\n  return <MemePage memes={regularMemes} route={route} />;\n}\n","import { NavLink } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nexport default function Navigation() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n\n        <Nav className=\"mr-auto\">\n          <NavLink className=\"nav-link navbar-item\" to=\"/regular\">regular</NavLink>\n          <NavLink className=\"nav-link navbar-item\" to=\"/hot\">hot</NavLink>\n        </Nav>\n\n        <Navbar.Brand className=\"brand\"><h1>meme ranking</h1></Navbar.Brand>\n\n        <Nav className=\"ml-auto nav-pages-right\">\n          <NavLink className=\"nav-link navbar-item\" to=\"/upload-meme\">upload meme</NavLink>\n        </Nav>\n\n      </Navbar.Collapse>\n\n    </Navbar>\n  );\n}\n","import Alert from 'react-bootstrap/Alert';\n\nexport default function AlertMessage({ showMessage, messageContent }) {\n  if (showMessage) {\n    return (\n      <Alert variant=\"info\">\n        {messageContent}\n      </Alert>\n    );\n  }\n  return <></>;\n}\n","import Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport AlertMessage from './AlertMessageComponent';\nimport { addMemeAction } from '../store/actions/globalActions';\n\nexport default function UploadMeme() {\n  const dispatch = useDispatch();\n\n  const initialFormData = { title: '', url: '' };\n  const [formData, setFormData] = useState(initialFormData);\n  const [showSuccess, setShowSucces] = useState(false);\n\n  const handleFormData = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value.trim(),\n    });\n  };\n\n  const resetUploadMemePage = () => {\n    setFormData({ ...initialFormData });\n    setShowSucces(true);\n    setTimeout(() => setShowSucces(false), 3000);\n  };\n\n  const handleAddMeme = (e) => {\n    e.preventDefault();\n    dispatch(addMemeAction(formData));\n    resetUploadMemePage();\n  };\n\n  return (\n    <div>\n      <h1>upload your own memes</h1>\n      <Form onSubmit={handleAddMeme}>\n        <Form.Group controlId=\"formTitle\">\n          <Form.Label>title:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"type a title\"\n            required\n            value={formData.title}\n            onChange={handleFormData}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"formUrl\">\n          <Form.Label>image url:</Form.Label>\n          <Form.Control\n            type=\"url\"\n            name=\"url\"\n            placeholder=\"type an url\"\n            required\n            accept=\"image/*\"\n            value={formData.url}\n            onChange={handleFormData}\n          />\n        </Form.Group>\n        <Button type=\"submit\" variant=\"light\">submit</Button>\n        <AlertMessage showMessage={showSuccess} messageContent=\"Your meme has been submited!\" />\n      </Form>\n\n    </div>\n  );\n}\n","import {\n  BrowserRouter as Router, Route, Switch,\n} from 'react-router-dom';\nimport './App.css';\n\nimport Error from './components/ErrorComponent';\nimport MemeRouter from './components/MemeRouterComponent';\nimport { MEME_TYPE } from './ProjectEnums';\nimport Navigation from './components/NavigationComponent';\nimport UploadMeme from './components/UploadMemeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path={['/', '/regular']}>\n            <MemeRouter route={MEME_TYPE.REGULAR} />\n          </Route>\n\n          <Route exact path=\"/hot\">\n            <MemeRouter route={MEME_TYPE.HOT} />\n          </Route>\n\n          <Route exact path=\"/upload-meme\">\n            <UploadMeme />\n          </Route>\n\n          <Route exact path=\"*\">\n            <Error />\n          </Route>\n\n        </Switch>\n\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { memeDb } from '../../memeDb';\n\nconst initialState = {\n  memes: memeDb,\n};\n\nconst updateUpVote = (meme) => ({ ...meme, upvotes: meme.upvotes + 1 });\n\nconst updateDownVote = (meme) => ({ ...meme, downvotes: meme.downvotes + 1 });\n\nconst vote = (memeId, memes, updateVotesCallback) => memes.map((meme) => {\n  if (meme.id !== memeId) {\n    return meme;\n  }\n  return updateVotesCallback(meme);\n});\n\nexport const globalReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'UPVOTE': {\n      const newArrayUpvote = vote(action.id, state.memes, updateUpVote);\n      return {\n        ...state,\n        memes: newArrayUpvote,\n      };\n    }\n    case 'DOWNVOTE': {\n      const newArrayDowvote = vote(action.id, state.memes, updateDownVote);\n      return {\n        ...state,\n        memes: newArrayDowvote,\n      };\n    }\n    case 'ADD_MEME': {\n      return {\n        ...state,\n        memes: [...state.memes, action.payload],\n      };\n    }\n    default: return { ...state };\n  }\n};\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const memeDb = [\n  {\n    id: uuidv4(),\n    title: 'meme 1',\n    upvotes: 1,\n    downvotes: 0,\n    img: 'meme1.png',\n  },\n  {\n    id: uuidv4(),\n    title: 'meme 2',\n    upvotes: 6,\n    downvotes: 0,\n    img: 'meme2.jpeg',\n  },\n  {\n    id: uuidv4(),\n    title: 'meme 3',\n    upvotes: 1,\n    downvotes: 6,\n    img: 'meme3.jpg',\n  },\n  {\n    id: uuidv4(),\n    title: 'meme 4',\n    upvotes: 10,\n    downvotes: 3,\n    img: 'meme4.jpg',\n  },\n  {\n    id: uuidv4(),\n    title: 'Space Cat',\n    upvotes: 0,\n    downvotes: 0,\n    img: 'https://i.imgur.com/IZvHqDW.jpeg',\n  },\n  {\n    id: uuidv4(),\n    title: 'Landscape',\n    upvotes: 0,\n    downvotes: 0,\n    img: 'https://www.w3schools.com/css/img_5terre_wide.jpg',\n  },\n\n];\n","import { createStore } from 'redux';\nimport { globalReducer } from './reducers/globalReducer';\n\nconst store = createStore(globalReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}